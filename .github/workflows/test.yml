name: Build and Deploy FastAPI App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test if app starts
      run: |
        python -c "from main import app; print('App imported successfully!')"
    
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-demo:latest .
    
    - name: Test Docker container
      run: |
        docker run -d -p 8000:8000 --name test-container ${{ secrets.DOCKER_USERNAME }}/fastapi-demo:latest
        sleep 5
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
    
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    
    - name: Push to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-demo:latest
    
    - name: Deploy to DigitalOcean Droplet
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: root
        key: ${{ secrets.DROPLET_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          # Create app directory
          mkdir -p /var/www/fastapi-app
          cd /var/www/fastapi-app
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            fastapi-app:
              image: ${{ secrets.DOCKER_USERNAME }}/fastapi-demo:latest
              container_name: fastapi-app
              restart: unless-stopped
              expose:
                - "8000"
              networks:
                - app-network
          
            nginx:
              image: nginx:alpine
              container_name: nginx-proxy
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
              depends_on:
                - fastapi-app
              networks:
                - app-network
          
          networks:
            app-network:
              driver: bridge
          EOF
          
          # Create nginx directory and config
          mkdir -p nginx
          cat > nginx/nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              upstream fastapi {
                  server fastapi-app:8000;
              }
          
              server {
                  listen 80;
                  server_name my-ci-cd-pipeline.solcraftdevs.com;
          
                  location / {
                      proxy_pass http://fastapi;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
          }
          EOF
          
          # Install docker-compose if not present
          which docker-compose || curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-demo:latest
          
          # Stop any existing containers
          docker-compose down || true
          docker stop fastapi-app nginx-proxy || true
          docker rm fastapi-app nginx-proxy || true
          
          # Deploy with docker-compose
          docker-compose up -d
          
          echo "Deployment complete!"
          echo "App should be available at:"
          echo "- http://my-ci-cd-pipeline.solcraftdevs.com"
          echo "- http://my-ci-cd-pipeline.solcraftdevs.com/docs"
          echo "- Fallback: http://$(curl -s ifconfig.me)"